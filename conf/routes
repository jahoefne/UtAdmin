# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file             controllers.Assets.at(path="/public", file)


GET            /                         @controllers.Application.index


GET            /chat.json                @controllers.ChatController.getJsonChat(count: Int, page: Int, radio: Boolean, userId: Option[Int], fromMessageId: Option[Int], queryString: Option[String],latestId: Int ?= -1)
GET            /chat.json/latestId       @controllers.ChatController.latestMessageId
GET            /chatlog                  @controllers.ChatController.chatlog()
GET            /user                     @controllers.Application.userById(id:Int)


GET            /online-players.json      @controllers.UserController.getJsonOnlinePlayers()


## XLRSTATS STUFF
POST            /set-xlr-visibility       @controllers.Administrator.setXlrVisibility(id:Int, value:Boolean)
POST            /reset-xlrstats           @controllers.Administrator.resetXlrstats(id:Int)


####
# JS Routes, generated javascript for acessing REST-Services
GET            /jsRoutes                 @controllers.Application.javascriptRoutes

#########################
# Penalty related routes
GET            /add-punishment           @controllers.PenaltyController.punishPlayer(userId: Int, reason: String, penalty:String, duration:Option[String])
GET            /remove-punishment        @controllers.PenaltyController.removePunishment(penaltyId:Int)

#########################
# Administrator routes
GET            /accounts                 @controllers.Administrator.accounts()
POST           /addUser                  @controllers.Administrator.addUser(user:String,password: String , rank:Int, b3Id:Int)
GET            /accountDelete            @controllers.Administrator.deleteUser(user:String)
GET            /restart-server           @controllers.Administrator.restartServer()
GET            /restart-b3               @controllers.Administrator.restartB3()

GET            /allLogs                  @controllers.Administrator.allLogs()
GET            /password-change          @controllers.Administrator.passwordChange()
GET            /changePassword           @controllers.Administrator.changePassword(password: String)
GET            /changeGroup              @controllers.Administrator.changeGroupOfUser(userId: Int, groupBits: Int)

##############
# RCON SERVICE
POST            /slap                     @controllers.Rcon.slap(player: Int,name: String)
POST            /say                      @controllers.Rcon.say(text: String)
POST            /pm                       @controllers.Rcon.privateMessage(receiverSlot: Int ,text: String, b3Id: Int, receiverName: String)
POST            /kick                     @controllers.Rcon.kick(player: Int, name: String)
POST            /nuke                     @controllers.Rcon.nuke(player: Int, name: String)
POST            /startDemo                @controllers.Rcon.startServerDemo(player: Int, name: String)
POST            /stopDemo                 @controllers.Rcon.stopServerDemo(player: Int, name: String)
POST            /kill                     @controllers.Rcon.kill(player: Int, name: String)
POST            /forceRed                 @controllers.Rcon.forceRed(player: Int, name: String)
POST            /forceBlue                @controllers.Rcon.forceBlue(player: Int, name: String)
POST            /forceSpec                @controllers.Rcon.forceSpec(player: Int, name: String)


########################################################################
# Public routes - these methods do not require the user to be logged in
OPTIONS        /*all                     @controllers.Public.preflight(all: String)
GET            /publicstatus             @controllers.Public.publicStatus()
GET            /publicbans               @controllers.Public.publicBans()


# Link to SecureSocial routes
->             /auth                     securesocial.Routes