# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file             controllers.Assets.at(path="/public", file)


GET            /                         @controllers.Application.index


GET            /chat.json                @controllers.ChatController.getJsonChat(count: Int, page: Int, radio: Boolean, userId: Option[Int], fromMessageId: Option[Int], queryString: Option[String],latestId: Int ?= -1)
GET            /chat.json/latestId       @controllers.ChatController.latestMessageId
GET            /chatlog                  @controllers.ChatController.chatlog()
GET            /chat-template.html       @controllers.ChatController.chatComponentHtml()

GET            /user.json                @controllers.UserController.userJsonById(id:Int)
GET            /user-aliases.json        @controllers.UserController.userAliasesById(id:Int)
GET            /user-template.html       @controllers.UserController.getUserTemplatetHtml()

GET            /users.json/ip            @controllers.UserController.usersJsonByIp(q: Option[String], groupBits:Option[Int], count: Int, page: Int)
GET            /users.json/name          @controllers.UserController.usersJsonByName(q: Option[String], groupBits: Option[Int], count: Int, page: Int)
GET            /users-template.html      @controllers.UserController.getUsersTemplateHtml()

GET            /online-players.json      @controllers.UserController.getJsonOnlinePlayers()
GET            /status-template.html     @controllers.UserController.getStatusTemplateHtml()
GET            /remove-punishment        @controllers.PenaltyController.removePunishment(penaltyId:Int)
GET            /changeGroup              @controllers.UserController.changeGroupOfUser(userId: Int, groupBits: Int)
GET            /set-xlr-visibility       @controllers.UserController.setXlrVisibility(id:Int, value:Boolean)


GET            /add-punishment           @controllers.PenaltyController.punishPlayer(userId: Int, reason: String, penalty:String, duration:Option[String])
GET            /penalties.json           @controllers.PenaltyController.getPenaltiesJson(count: Int,page: Int, userId: Option[Int], queryString: Option[String], filterType: Option[String], activeOnly: Option[Boolean])
GET            /penalties-template.html  @controllers.PenaltyController.penaltiesTemplatHtml()



GET            /server-stats.html       @controllers.ServerStats.serverStats()
GET            /timeInfoTemplate.html   @controllers.ServerStats.timeInfoTemplate()
GET            /timeInfo.json           @controllers.ServerStats.timeInfoJson(count:Int ?= 50)
GET            /totalDeaths.json        @controllers.ServerStats.totalDeaths()


####
# JS Routes, generated javascript for acessing REST-Services
GET            /jsRoutes                 @controllers.Application.javascriptRoutes



#############################
# UtAdmin User Administration
POST           /addUser                  @controllers.AccountsController.addUser(user:String, password: String , rank:Int, b3Id:Int)
GET            /accounts-template.html   @controllers.AccountsController.accountsTemplateHtml()
GET            /accounts.json            @controllers.AccountsController.accountsJson()
POST           /accountDelete            @controllers.AccountsController.deleteUser(user:String)
POST           /changePassword           @controllers.AccountsController.changePassword(password: String)


##############
# RCON SERVICE
POST            /slap                     @controllers.Rcon.slap(player: Int,name: String)
POST            /say                      @controllers.Rcon.say(text: String)
POST            /pm                       @controllers.Rcon.privateMessage(receiverSlot: Int ,text: String, b3Id: Int, receiverName: String)
POST            /kick                     @controllers.Rcon.kick(player: Int, name: String)
POST            /nuke                     @controllers.Rcon.nuke(player: Int, name: String)
POST            /startDemo                @controllers.Rcon.startServerDemo(player: Int, name: String)
POST            /stopDemo                 @controllers.Rcon.stopServerDemo(player: Int, name: String)
POST            /kill                     @controllers.Rcon.kill(player: Int, name: String)
POST            /forceRed                 @controllers.Rcon.forceRed(player: Int, name: String)
POST            /forceBlue                @controllers.Rcon.forceBlue(player: Int, name: String)
POST            /forceSpec                @controllers.Rcon.forceSpec(player: Int, name: String)
GET             /restart-server           @controllers.Rcon.restartServer()
GET             /restart-b3               @controllers.Rcon.restartB3()




########################################################################
# Public routes - these methods do not require the user to be logged in
OPTIONS        /*all                     @controllers.Public.preflight(all: String)
GET            /publicstatus             @controllers.Public.publicStatus()
GET            /publicbans               @controllers.Public.publicBans()


# Link to SecureSocial routes
->             /auth                     securesocial.Routes